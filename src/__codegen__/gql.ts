/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "\n  query Config {\n    viewer {\n      organization {\n        urlKey\n      }\n    }\n    teams {\n      nodes {\n        id\n        key\n        name\n      }\n    }\n  }\n": typeof types.ConfigDocument,
    "\n      query GetUserSettings {\n        userSettings {\n          autoAssignToSelf\n        }\n      }\n    ": typeof types.GetUserSettingsDocument,
    "\n            mutation CreateIssue($input: IssueCreateInput!) {\n              issueCreate(input: $input) {\n                success\n                issue { id, identifier, url, team { key } }\n              }\n            }\n          ": typeof types.CreateIssueDocument,
    "\n          mutation CreateIssue($input: IssueCreateInput!) {\n            issueCreate(input: $input) {\n              success\n              issue { id, identifier, url, team { key } }\n            }\n          }\n        ": typeof types.CreateIssueDocument,
    "\n      query GetIssueDeleteDetails($id: String!) {\n        issue(id: $id) { title, identifier }\n      }\n    ": typeof types.GetIssueDeleteDetailsDocument,
    "\n      mutation DeleteIssue($id: String!) {\n        issueDelete(id: $id) {\n          success\n          entity {\n            identifier\n            title\n          }\n        }\n      }\n    ": typeof types.DeleteIssueDocument,
    "\n          mutation UpdateIssue($id: String!, $input: IssueUpdateInput!) {\n            issueUpdate(id: $id, input: $input) {\n              success\n              issue { id, identifier, url, title }\n            }\n          }\n        ": typeof types.UpdateIssueDocument,
    "\n  query GetProjects($filter: ProjectFilter) {\n    projects(filter: $filter) {\n      nodes {\n        id\n        name\n        description\n        slugId\n        icon\n        color\n        status {\n          id\n          name\n          color\n          type\n        }\n        lead {\n          name\n          displayName\n          initials\n        }\n        priority\n        health\n        startDate\n        targetDate\n        startedAt\n        completedAt\n        canceledAt\n        createdAt\n        updatedAt\n        url\n        teams {\n          nodes {\n            key\n          }\n        }\n      }\n    }\n  }\n": typeof types.GetProjectsDocument,
    "\n          query GetViewer {\n            viewer {\n              organization {\n                urlKey\n              }\n            }\n          }\n        ": typeof types.GetViewerDocument,
    "\n  query GetProjectDetails($id: String!) {\n    project(id: $id) {\n      id\n      name\n      description\n      slugId\n      icon\n      color\n      status {\n        id\n        name\n        color\n      }\n      creator {\n        name\n        displayName\n      }\n      lead {\n        name\n        displayName\n      }\n      priority\n      health\n      startDate\n      targetDate\n      startedAt\n      completedAt\n      canceledAt\n      updatedAt\n      createdAt\n      url\n      teams {\n        nodes {\n          id\n          key\n          name\n        }\n      }\n      issues {\n        nodes {\n          id\n          identifier\n          title\n          state {\n            name\n            type\n          }\n        }\n      }\n      lastUpdate {\n        id\n        body\n        health\n        createdAt\n        user {\n          name\n          displayName\n        }\n      }\n    }\n  }\n": typeof types.GetProjectDetailsDocument,
    "\n            mutation CreateTeam($input: TeamCreateInput!) {\n              teamCreate(input: $input) {\n                success\n                team { id, name, key }\n              }\n            }\n          ": typeof types.CreateTeamDocument,
    "\n          mutation CreateTeam($input: TeamCreateInput!) {\n            teamCreate(input: $input) {\n              success\n              team { id, name, key }\n            }\n          }\n        ": typeof types.CreateTeamDocument,
    "\n  query GetTeams($filter: TeamFilter) {\n    teams(filter: $filter) {\n      nodes {\n        id\n        name\n        key\n        description\n        icon\n        color\n        cyclesEnabled\n        createdAt\n        updatedAt\n        archivedAt\n        organization {\n          id\n          name\n        }\n      }\n    }\n  }\n": typeof types.GetTeamsDocument,
    "\n    query GetIssueId($id: String!) {\n      issue(id: $id) {\n        id\n      }\n    }\n  ": typeof types.GetIssueIdDocument,
    "\n    query GetWorkflowStates($teamKey: String!) {\n      team(id: $teamKey) {\n        states {\n          nodes {\n            id\n            name\n            type\n            position\n            color\n            description\n          }\n        }\n      }\n    }\n  ": typeof types.GetWorkflowStatesDocument,
    "\n    mutation UpdateIssueState($issueId: String!, $stateId: String!) {\n      issueUpdate(id: $issueId, input: { stateId: $stateId }) {\n        success\n      }\n    }\n  ": typeof types.UpdateIssueStateDocument,
    "\n      query GetIssueDetailsWithComments($id: String!) {\n        issue(id: $id) {\n          title\n          description\n          url\n          branchName\n          comments(first: 50, orderBy: createdAt) {\n            nodes {\n              id\n              body\n              createdAt\n              user {\n                name\n                displayName\n              }\n              externalUser {\n                name\n                displayName\n              }\n              parent {\n                id\n              }\n            }\n          }\n        }\n      }\n    ": typeof types.GetIssueDetailsWithCommentsDocument,
    "\n      query GetIssueDetails($id: String!) {\n        issue(id: $id) {\n          title\n          description\n          url\n          branchName\n        }\n      }\n    ": typeof types.GetIssueDetailsDocument,
    "\n      query GetParentIssueTitle($id: String!) {\n        issue(id: $id) {\n          title\n          identifier\n        }\n      }\n    ": typeof types.GetParentIssueTitleDocument,
    "\n      query GetParentIssueData($id: String!) {\n        issue(id: $id) {\n          title\n          identifier\n          project {\n            id\n          }\n        }\n      }\n    ": typeof types.GetParentIssueDataDocument,
    "\n    query GetIssuesForState($sort: [IssueSortInput!], $filter: IssueFilter!) {\n      issues(filter: $filter, sort: $sort) {\n        nodes {\n          id\n          identifier\n          title\n          priority\n          estimate\n          assignee {\n            initials\n          }\n          state {\n            id\n            name\n            color\n          }\n          labels {\n            nodes {\n              id\n              name\n              color\n            }\n          }\n          updatedAt\n        }\n      }\n    }\n  ": typeof types.GetIssuesForStateDocument,
    "\n    query GetProjectIdByName($name: String!) {\n      projects(filter: { name: { eq: $name } }) {\n        nodes {\n          id\n        }\n      }\n    }\n  ": typeof types.GetProjectIdByNameDocument,
    "\n    query GetProjectIdOptionsByName($name: String!) {\n      projects(filter: { name: { containsIgnoreCase: $name } }) {\n        nodes {\n          id\n          name\n        }\n      }\n    }\n  ": typeof types.GetProjectIdOptionsByNameDocument,
    "\n    query GetTeamIdByKey($team: String!) {\n      teams(filter: { key: { eq: $team } }) {\n        nodes {\n          id\n        }\n      }\n    }\n  ": typeof types.GetTeamIdByKeyDocument,
    "\n    query GetTeamIdOptionsByKey($team: String!) {\n      teams(filter: { key: { containsIgnoreCase: $team } }) {\n        nodes {\n          id\n          key\n          name\n        }\n      }\n    }\n  ": typeof types.GetTeamIdOptionsByKeyDocument,
    "\n    query ListUsers {\n      users {\n        nodes {\n          id\n          displayName\n          email\n        }\n      }\n    }\n  ": typeof types.ListUsersDocument,
    "\n      query GetViewerId {\n        viewer {\n          id\n        }\n      }\n    ": typeof types.GetViewerIdDocument,
    "\n      query LookupUser($input: String!) {\n        users(\n          filter: {\n            or: [\n              { email: { eqIgnoreCase: $input } }\n              { displayName: { eqIgnoreCase: $input } }\n              { name: { containsIgnoreCaseAndAccent: $input } }\n            ]\n          }\n        ) {\n          nodes {\n            id\n            email\n            displayName\n            name\n          }\n        }\n      }\n    ": typeof types.LookupUserDocument,
    "\n    query GetIssueLabelIdByNameForTeam($name: String!, $teamKey: String!) {\n      issueLabels(\n        filter: {\n          name: { eqIgnoreCase: $name }\n          or: [{ team: { key: { eq: $teamKey } } }, { team: { null: true } }]\n        }\n      ) {\n        nodes {\n          id\n          name\n        }\n      }\n    }\n  ": typeof types.GetIssueLabelIdByNameForTeamDocument,
    "\n    query GetIssueLabelIdOptionsByNameForTeam(\n      $name: String!\n      $teamKey: String!\n    ) {\n      issueLabels(\n        filter: {\n          name: { containsIgnoreCase: $name }\n          or: [{ team: { key: { eq: $teamKey } } }, { team: { null: true } }]\n        }\n      ) {\n        nodes {\n          id\n          name\n        }\n      }\n    }\n  ": typeof types.GetIssueLabelIdOptionsByNameForTeamDocument,
    "\n    query GetAllTeams($first: Int, $after: String) {\n      teams(first: $first, after: $after) {\n        nodes {\n          id\n          key\n          name\n        }\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n      }\n    }\n  ": typeof types.GetAllTeamsDocument,
    "\n    query GetLabelsForTeam($teamKey: String!) {\n      team(id: $teamKey) {\n        labels {\n          nodes {\n            id\n            name\n            color\n          }\n        }\n      }\n    }\n  ": typeof types.GetLabelsForTeamDocument,
    "\n    query GetTeamMembers($teamKey: String!, $first: Int, $after: String) {\n      team(id: $teamKey) {\n        members(first: $first, after: $after) {\n          nodes {\n            id\n            name\n            displayName\n            email\n            active\n            initials\n            description\n            timezone\n            lastSeen\n            statusEmoji\n            statusLabel\n            guest\n            isAssignable\n          }\n          pageInfo {\n            hasNextPage\n            endCursor\n          }\n        }\n      }\n    }\n  ": typeof types.GetTeamMembersDocument,
    "\n    mutation CreateDocument($input: DocumentCreateInput!) {\n      documentCreate(input: $input) {\n        success\n        document {\n          id\n          title\n          slugId\n          url\n          project {\n            id\n            name\n          }\n        }\n      }\n    }\n  ": typeof types.CreateDocumentDocument,
    "\n    mutation UpdateDocument($id: String!, $input: DocumentUpdateInput!) {\n      documentUpdate(id: $id, input: $input) {\n        success\n        document {\n          id\n          title\n          slugId\n          url\n        }\n      }\n    }\n  ": typeof types.UpdateDocumentDocument,
    "\n    mutation DeleteDocument($id: String!) {\n      documentDelete(id: $id) {\n        success\n        entity {\n          id\n          title\n        }\n      }\n    }\n  ": typeof types.DeleteDocumentDocument,
    "\n    mutation UnarchiveDocument($id: String!) {\n      documentUnarchive(id: $id) {\n        success\n        entity {\n          id\n          title\n          url\n        }\n      }\n    }\n  ": typeof types.UnarchiveDocumentDocument,
    "\n    query ListDocuments(\n      $filter: DocumentFilter\n      $first: Int\n      $orderBy: PaginationOrderBy\n      $includeArchived: Boolean\n    ) {\n      documents(\n        filter: $filter\n        first: $first\n        orderBy: $orderBy\n        includeArchived: $includeArchived\n      ) {\n        nodes {\n          id\n          title\n          slugId\n          icon\n          color\n          createdAt\n          updatedAt\n          url\n          creator {\n            id\n            name\n            displayName\n          }\n          project {\n            id\n            name\n          }\n          initiative {\n            id\n            name\n          }\n        }\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n      }\n    }\n  ": typeof types.ListDocumentsDocument,
    "\n    query ViewDocument($id: String!) {\n      document(id: $id) {\n        id\n        title\n        slugId\n        icon\n        color\n        url\n        createdAt\n        updatedAt\n        creator {\n          id\n          name\n          displayName\n        }\n        updatedBy {\n          id\n          name\n          displayName\n        }\n        project {\n          id\n          name\n          url\n        }\n        initiative {\n          id\n          name\n          url\n        }\n        content\n        comments {\n          nodes {\n            id\n            body\n            createdAt\n            user {\n              id\n              name\n              displayName\n            }\n          }\n        }\n      }\n    }\n  ": typeof types.ViewDocumentDocument,
    "\n    query ListProjectStatuses {\n      projectStatuses {\n        nodes {\n          id\n          name\n          type\n          color\n          description\n          position\n        }\n      }\n    }\n  ": typeof types.ListProjectStatusesDocument,
    "\n    mutation CreateProject($input: ProjectCreateInput!) {\n      projectCreate(input: $input) {\n        success\n        project {\n          id\n          name\n          slugId\n          url\n          status {\n            id\n            name\n            type\n          }\n          lead {\n            id\n            name\n            displayName\n          }\n          teams {\n            nodes {\n              id\n              key\n              name\n            }\n          }\n        }\n      }\n    }\n  ": typeof types.CreateProjectDocument,
    "\n    mutation UpdateProject($id: String!, $input: ProjectUpdateInput!) {\n      projectUpdate(id: $id, input: $input) {\n        success\n        project {\n          id\n          name\n          slugId\n          url\n          status {\n            id\n            name\n          }\n        }\n      }\n    }\n  ": typeof types.UpdateProjectDocument,
    "\n    mutation DeleteProject($id: String!) {\n      projectDelete(id: $id) {\n        success\n        entity {\n          id\n          name\n        }\n      }\n    }\n  ": typeof types.DeleteProjectDocument,
    "\n    mutation UnarchiveProject($id: String!) {\n      projectUnarchive(id: $id) {\n        success\n        entity {\n          id\n          name\n          url\n        }\n      }\n    }\n  ": typeof types.UnarchiveProjectDocument,
    "\n    mutation CreateMilestone($input: ProjectMilestoneCreateInput!) {\n      projectMilestoneCreate(input: $input) {\n        success\n        projectMilestone {\n          id\n          name\n          description\n          targetDate\n          status\n          progress\n          project {\n            id\n            name\n          }\n        }\n      }\n    }\n  ": typeof types.CreateMilestoneDocument,
    "\n    query ListProjectMilestones($projectId: String!) {\n      project(id: $projectId) {\n        id\n        name\n        projectMilestones {\n          nodes {\n            id\n            name\n            description\n            targetDate\n            status\n            progress\n            sortOrder\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n  ": typeof types.ListProjectMilestonesDocument,
    "\n    mutation UpdateMilestone($id: String!, $input: ProjectMilestoneUpdateInput!) {\n      projectMilestoneUpdate(id: $id, input: $input) {\n        success\n        projectMilestone {\n          id\n          name\n          description\n          targetDate\n          status\n        }\n      }\n    }\n  ": typeof types.UpdateMilestoneDocument,
    "\n    mutation DeleteMilestone($id: String!) {\n      projectMilestoneDelete(id: $id) {\n        success\n      }\n    }\n  ": typeof types.DeleteMilestoneDocument,
    "\n    mutation CreateProjectUpdate($input: ProjectUpdateCreateInput!) {\n      projectUpdateCreate(input: $input) {\n        success\n        projectUpdate {\n          id\n          body\n          health\n          createdAt\n          url\n          user {\n            id\n            name\n            displayName\n          }\n          project {\n            id\n            name\n          }\n        }\n      }\n    }\n  ": typeof types.CreateProjectUpdateDocument,
    "\n    query ListProjectUpdates($projectId: String!, $first: Int) {\n      project(id: $projectId) {\n        id\n        name\n        projectUpdates(first: $first) {\n          nodes {\n            id\n            body\n            health\n            createdAt\n            updatedAt\n            url\n            user {\n              id\n              name\n              displayName\n            }\n          }\n        }\n      }\n    }\n  ": typeof types.ListProjectUpdatesDocument,
    "\n    mutation CreateInitiative($input: InitiativeCreateInput!) {\n      initiativeCreate(input: $input) {\n        success\n        initiative {\n          id\n          name\n          slugId\n          url\n          status\n          owner {\n            id\n            name\n            displayName\n          }\n          targetDate\n        }\n      }\n    }\n  ": typeof types.CreateInitiativeDocument,
    "\n    mutation UpdateInitiative($id: String!, $input: InitiativeUpdateInput!) {\n      initiativeUpdate(id: $id, input: $input) {\n        success\n        initiative {\n          id\n          name\n          slugId\n          url\n          status\n        }\n      }\n    }\n  ": typeof types.UpdateInitiativeDocument,
    "\n    query ListInitiatives($filter: InitiativeFilter, $first: Int) {\n      initiatives(filter: $filter, first: $first) {\n        nodes {\n          id\n          name\n          slugId\n          url\n          description\n          status\n          owner {\n            id\n            name\n            displayName\n          }\n          targetDate\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  ": typeof types.ListInitiativesDocument,
    "\n    query ViewInitiative($id: String!) {\n      initiative(id: $id) {\n        id\n        name\n        slugId\n        url\n        description\n        content\n        status\n        owner {\n          id\n          name\n          displayName\n        }\n        targetDate\n        createdAt\n        updatedAt\n        projects {\n          nodes {\n            id\n            name\n            slugId\n            status {\n              name\n              type\n            }\n            progress\n          }\n        }\n      }\n    }\n  ": typeof types.ViewInitiativeDocument,
    "\n    mutation ArchiveInitiative($id: String!) {\n      initiativeArchive(id: $id) {\n        success\n      }\n    }\n  ": typeof types.ArchiveInitiativeDocument,
    "\n    mutation UnarchiveInitiative($id: String!) {\n      initiativeUnarchive(id: $id) {\n        success\n        entity {\n          id\n          name\n          url\n        }\n      }\n    }\n  ": typeof types.UnarchiveInitiativeDocument,
    "\n    mutation InitiativeAddProject($initiativeId: String!, $projectId: String!) {\n      initiativeToProjectCreate(\n        input: {\n          initiativeId: $initiativeId\n          projectId: $projectId\n        }\n      ) {\n        success\n        initiativeToProject {\n          id\n          initiative {\n            id\n            name\n            slugId\n          }\n        }\n      }\n    }\n  ": typeof types.InitiativeAddProjectDocument,
    "\n    mutation InitiativeRemoveProject($id: String!) {\n      initiativeToProjectDelete(id: $id) {\n        success\n      }\n    }\n  ": typeof types.InitiativeRemoveProjectDocument,
    "\n    mutation CreateInitiativeUpdate($input: InitiativeUpdateCreateInput!) {\n      initiativeUpdateCreate(input: $input) {\n        success\n        initiativeUpdate {\n          id\n          health\n          body\n          url\n          createdAt\n          user {\n            id\n            displayName\n          }\n        }\n      }\n    }\n  ": typeof types.CreateInitiativeUpdateDocument,
    "\n    query ListInitiativeUpdates($filter: InitiativeUpdateFilter, $first: Int) {\n      initiativeUpdates(filter: $filter, first: $first) {\n        nodes {\n          id\n          health\n          body\n          url\n          createdAt\n          user {\n            id\n            displayName\n          }\n        }\n      }\n    }\n  ": typeof types.ListInitiativeUpdatesDocument,
    "\n    mutation CreateLabel($input: IssueLabelCreateInput!) {\n      issueLabelCreate(input: $input) {\n        success\n        issueLabel {\n          id\n          name\n          description\n          color\n          team { id key name }\n        }\n      }\n    }\n  ": typeof types.CreateLabelDocument,
    "\n    mutation UpdateLabel($id: String!, $input: IssueLabelUpdateInput!) {\n      issueLabelUpdate(id: $id, input: $input) {\n        success\n        issueLabel {\n          id\n          name\n          description\n          color\n          team { id key name }\n        }\n      }\n    }\n  ": typeof types.UpdateLabelDocument,
    "\n    query ListLabels($teamId: ID, $first: Int) {\n      issueLabels(\n        filter: { team: { id: { eq: $teamId } } }\n        first: $first\n      ) {\n        nodes {\n          id\n          name\n          description\n          color\n          team { id key name }\n        }\n      }\n    }\n  ": typeof types.ListLabelsDocument,
    "\n    mutation DeleteLabel($id: String!) {\n      issueLabelDelete(id: $id) {\n        success\n      }\n    }\n  ": typeof types.DeleteLabelDocument,
    "\n    query GetIssueProject($issueId: String!) {\n      issue(id: $issueId) {\n        id\n        project {\n          id\n          name\n        }\n      }\n    }\n  ": typeof types.GetIssueProjectDocument,
    "\n    query GetProjectStatuses {\n      projectStatuses {\n        nodes {\n          id\n          name\n          type\n          position\n          color\n          description\n        }\n      }\n    }\n  ": typeof types.GetProjectStatusesDocument,
    "\n    query SearchIssues($term: String!, $teamId: String, $first: Int) {\n      searchIssues(term: $term, teamId: $teamId, first: $first) {\n        nodes {\n          id\n          identifier\n          title\n        }\n      }\n    }\n  ": typeof types.SearchIssuesDocument,
    "\n    query SearchProjects($term: String!, $teamId: String, $first: Int) {\n      searchProjects(term: $term, teamId: $teamId, first: $first) {\n        nodes {\n          id\n          name\n        }\n      }\n    }\n  ": typeof types.SearchProjectsDocument,
    "\n    query SearchDocuments($term: String!, $teamId: String, $first: Int) {\n      searchDocuments(term: $term, teamId: $teamId, first: $first) {\n        nodes {\n          id\n          title\n        }\n      }\n    }\n  ": typeof types.SearchDocumentsDocument,
};
const documents: Documents = {
    "\n  query Config {\n    viewer {\n      organization {\n        urlKey\n      }\n    }\n    teams {\n      nodes {\n        id\n        key\n        name\n      }\n    }\n  }\n": types.ConfigDocument,
    "\n      query GetUserSettings {\n        userSettings {\n          autoAssignToSelf\n        }\n      }\n    ": types.GetUserSettingsDocument,
    "\n            mutation CreateIssue($input: IssueCreateInput!) {\n              issueCreate(input: $input) {\n                success\n                issue { id, identifier, url, team { key } }\n              }\n            }\n          ": types.CreateIssueDocument,
    "\n          mutation CreateIssue($input: IssueCreateInput!) {\n            issueCreate(input: $input) {\n              success\n              issue { id, identifier, url, team { key } }\n            }\n          }\n        ": types.CreateIssueDocument,
    "\n      query GetIssueDeleteDetails($id: String!) {\n        issue(id: $id) { title, identifier }\n      }\n    ": types.GetIssueDeleteDetailsDocument,
    "\n      mutation DeleteIssue($id: String!) {\n        issueDelete(id: $id) {\n          success\n          entity {\n            identifier\n            title\n          }\n        }\n      }\n    ": types.DeleteIssueDocument,
    "\n          mutation UpdateIssue($id: String!, $input: IssueUpdateInput!) {\n            issueUpdate(id: $id, input: $input) {\n              success\n              issue { id, identifier, url, title }\n            }\n          }\n        ": types.UpdateIssueDocument,
    "\n  query GetProjects($filter: ProjectFilter) {\n    projects(filter: $filter) {\n      nodes {\n        id\n        name\n        description\n        slugId\n        icon\n        color\n        status {\n          id\n          name\n          color\n          type\n        }\n        lead {\n          name\n          displayName\n          initials\n        }\n        priority\n        health\n        startDate\n        targetDate\n        startedAt\n        completedAt\n        canceledAt\n        createdAt\n        updatedAt\n        url\n        teams {\n          nodes {\n            key\n          }\n        }\n      }\n    }\n  }\n": types.GetProjectsDocument,
    "\n          query GetViewer {\n            viewer {\n              organization {\n                urlKey\n              }\n            }\n          }\n        ": types.GetViewerDocument,
    "\n  query GetProjectDetails($id: String!) {\n    project(id: $id) {\n      id\n      name\n      description\n      slugId\n      icon\n      color\n      status {\n        id\n        name\n        color\n      }\n      creator {\n        name\n        displayName\n      }\n      lead {\n        name\n        displayName\n      }\n      priority\n      health\n      startDate\n      targetDate\n      startedAt\n      completedAt\n      canceledAt\n      updatedAt\n      createdAt\n      url\n      teams {\n        nodes {\n          id\n          key\n          name\n        }\n      }\n      issues {\n        nodes {\n          id\n          identifier\n          title\n          state {\n            name\n            type\n          }\n        }\n      }\n      lastUpdate {\n        id\n        body\n        health\n        createdAt\n        user {\n          name\n          displayName\n        }\n      }\n    }\n  }\n": types.GetProjectDetailsDocument,
    "\n            mutation CreateTeam($input: TeamCreateInput!) {\n              teamCreate(input: $input) {\n                success\n                team { id, name, key }\n              }\n            }\n          ": types.CreateTeamDocument,
    "\n          mutation CreateTeam($input: TeamCreateInput!) {\n            teamCreate(input: $input) {\n              success\n              team { id, name, key }\n            }\n          }\n        ": types.CreateTeamDocument,
    "\n  query GetTeams($filter: TeamFilter) {\n    teams(filter: $filter) {\n      nodes {\n        id\n        name\n        key\n        description\n        icon\n        color\n        cyclesEnabled\n        createdAt\n        updatedAt\n        archivedAt\n        organization {\n          id\n          name\n        }\n      }\n    }\n  }\n": types.GetTeamsDocument,
    "\n    query GetIssueId($id: String!) {\n      issue(id: $id) {\n        id\n      }\n    }\n  ": types.GetIssueIdDocument,
    "\n    query GetWorkflowStates($teamKey: String!) {\n      team(id: $teamKey) {\n        states {\n          nodes {\n            id\n            name\n            type\n            position\n            color\n            description\n          }\n        }\n      }\n    }\n  ": types.GetWorkflowStatesDocument,
    "\n    mutation UpdateIssueState($issueId: String!, $stateId: String!) {\n      issueUpdate(id: $issueId, input: { stateId: $stateId }) {\n        success\n      }\n    }\n  ": types.UpdateIssueStateDocument,
    "\n      query GetIssueDetailsWithComments($id: String!) {\n        issue(id: $id) {\n          title\n          description\n          url\n          branchName\n          comments(first: 50, orderBy: createdAt) {\n            nodes {\n              id\n              body\n              createdAt\n              user {\n                name\n                displayName\n              }\n              externalUser {\n                name\n                displayName\n              }\n              parent {\n                id\n              }\n            }\n          }\n        }\n      }\n    ": types.GetIssueDetailsWithCommentsDocument,
    "\n      query GetIssueDetails($id: String!) {\n        issue(id: $id) {\n          title\n          description\n          url\n          branchName\n        }\n      }\n    ": types.GetIssueDetailsDocument,
    "\n      query GetParentIssueTitle($id: String!) {\n        issue(id: $id) {\n          title\n          identifier\n        }\n      }\n    ": types.GetParentIssueTitleDocument,
    "\n      query GetParentIssueData($id: String!) {\n        issue(id: $id) {\n          title\n          identifier\n          project {\n            id\n          }\n        }\n      }\n    ": types.GetParentIssueDataDocument,
    "\n    query GetIssuesForState($sort: [IssueSortInput!], $filter: IssueFilter!) {\n      issues(filter: $filter, sort: $sort) {\n        nodes {\n          id\n          identifier\n          title\n          priority\n          estimate\n          assignee {\n            initials\n          }\n          state {\n            id\n            name\n            color\n          }\n          labels {\n            nodes {\n              id\n              name\n              color\n            }\n          }\n          updatedAt\n        }\n      }\n    }\n  ": types.GetIssuesForStateDocument,
    "\n    query GetProjectIdByName($name: String!) {\n      projects(filter: { name: { eq: $name } }) {\n        nodes {\n          id\n        }\n      }\n    }\n  ": types.GetProjectIdByNameDocument,
    "\n    query GetProjectIdOptionsByName($name: String!) {\n      projects(filter: { name: { containsIgnoreCase: $name } }) {\n        nodes {\n          id\n          name\n        }\n      }\n    }\n  ": types.GetProjectIdOptionsByNameDocument,
    "\n    query GetTeamIdByKey($team: String!) {\n      teams(filter: { key: { eq: $team } }) {\n        nodes {\n          id\n        }\n      }\n    }\n  ": types.GetTeamIdByKeyDocument,
    "\n    query GetTeamIdOptionsByKey($team: String!) {\n      teams(filter: { key: { containsIgnoreCase: $team } }) {\n        nodes {\n          id\n          key\n          name\n        }\n      }\n    }\n  ": types.GetTeamIdOptionsByKeyDocument,
    "\n    query ListUsers {\n      users {\n        nodes {\n          id\n          displayName\n          email\n        }\n      }\n    }\n  ": types.ListUsersDocument,
    "\n      query GetViewerId {\n        viewer {\n          id\n        }\n      }\n    ": types.GetViewerIdDocument,
    "\n      query LookupUser($input: String!) {\n        users(\n          filter: {\n            or: [\n              { email: { eqIgnoreCase: $input } }\n              { displayName: { eqIgnoreCase: $input } }\n              { name: { containsIgnoreCaseAndAccent: $input } }\n            ]\n          }\n        ) {\n          nodes {\n            id\n            email\n            displayName\n            name\n          }\n        }\n      }\n    ": types.LookupUserDocument,
    "\n    query GetIssueLabelIdByNameForTeam($name: String!, $teamKey: String!) {\n      issueLabels(\n        filter: {\n          name: { eqIgnoreCase: $name }\n          or: [{ team: { key: { eq: $teamKey } } }, { team: { null: true } }]\n        }\n      ) {\n        nodes {\n          id\n          name\n        }\n      }\n    }\n  ": types.GetIssueLabelIdByNameForTeamDocument,
    "\n    query GetIssueLabelIdOptionsByNameForTeam(\n      $name: String!\n      $teamKey: String!\n    ) {\n      issueLabels(\n        filter: {\n          name: { containsIgnoreCase: $name }\n          or: [{ team: { key: { eq: $teamKey } } }, { team: { null: true } }]\n        }\n      ) {\n        nodes {\n          id\n          name\n        }\n      }\n    }\n  ": types.GetIssueLabelIdOptionsByNameForTeamDocument,
    "\n    query GetAllTeams($first: Int, $after: String) {\n      teams(first: $first, after: $after) {\n        nodes {\n          id\n          key\n          name\n        }\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n      }\n    }\n  ": types.GetAllTeamsDocument,
    "\n    query GetLabelsForTeam($teamKey: String!) {\n      team(id: $teamKey) {\n        labels {\n          nodes {\n            id\n            name\n            color\n          }\n        }\n      }\n    }\n  ": types.GetLabelsForTeamDocument,
    "\n    query GetTeamMembers($teamKey: String!, $first: Int, $after: String) {\n      team(id: $teamKey) {\n        members(first: $first, after: $after) {\n          nodes {\n            id\n            name\n            displayName\n            email\n            active\n            initials\n            description\n            timezone\n            lastSeen\n            statusEmoji\n            statusLabel\n            guest\n            isAssignable\n          }\n          pageInfo {\n            hasNextPage\n            endCursor\n          }\n        }\n      }\n    }\n  ": types.GetTeamMembersDocument,
    "\n    mutation CreateDocument($input: DocumentCreateInput!) {\n      documentCreate(input: $input) {\n        success\n        document {\n          id\n          title\n          slugId\n          url\n          project {\n            id\n            name\n          }\n        }\n      }\n    }\n  ": types.CreateDocumentDocument,
    "\n    mutation UpdateDocument($id: String!, $input: DocumentUpdateInput!) {\n      documentUpdate(id: $id, input: $input) {\n        success\n        document {\n          id\n          title\n          slugId\n          url\n        }\n      }\n    }\n  ": types.UpdateDocumentDocument,
    "\n    mutation DeleteDocument($id: String!) {\n      documentDelete(id: $id) {\n        success\n        entity {\n          id\n          title\n        }\n      }\n    }\n  ": types.DeleteDocumentDocument,
    "\n    mutation UnarchiveDocument($id: String!) {\n      documentUnarchive(id: $id) {\n        success\n        entity {\n          id\n          title\n          url\n        }\n      }\n    }\n  ": types.UnarchiveDocumentDocument,
    "\n    query ListDocuments(\n      $filter: DocumentFilter\n      $first: Int\n      $orderBy: PaginationOrderBy\n      $includeArchived: Boolean\n    ) {\n      documents(\n        filter: $filter\n        first: $first\n        orderBy: $orderBy\n        includeArchived: $includeArchived\n      ) {\n        nodes {\n          id\n          title\n          slugId\n          icon\n          color\n          createdAt\n          updatedAt\n          url\n          creator {\n            id\n            name\n            displayName\n          }\n          project {\n            id\n            name\n          }\n          initiative {\n            id\n            name\n          }\n        }\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n      }\n    }\n  ": types.ListDocumentsDocument,
    "\n    query ViewDocument($id: String!) {\n      document(id: $id) {\n        id\n        title\n        slugId\n        icon\n        color\n        url\n        createdAt\n        updatedAt\n        creator {\n          id\n          name\n          displayName\n        }\n        updatedBy {\n          id\n          name\n          displayName\n        }\n        project {\n          id\n          name\n          url\n        }\n        initiative {\n          id\n          name\n          url\n        }\n        content\n        comments {\n          nodes {\n            id\n            body\n            createdAt\n            user {\n              id\n              name\n              displayName\n            }\n          }\n        }\n      }\n    }\n  ": types.ViewDocumentDocument,
    "\n    query ListProjectStatuses {\n      projectStatuses {\n        nodes {\n          id\n          name\n          type\n          color\n          description\n          position\n        }\n      }\n    }\n  ": types.ListProjectStatusesDocument,
    "\n    mutation CreateProject($input: ProjectCreateInput!) {\n      projectCreate(input: $input) {\n        success\n        project {\n          id\n          name\n          slugId\n          url\n          status {\n            id\n            name\n            type\n          }\n          lead {\n            id\n            name\n            displayName\n          }\n          teams {\n            nodes {\n              id\n              key\n              name\n            }\n          }\n        }\n      }\n    }\n  ": types.CreateProjectDocument,
    "\n    mutation UpdateProject($id: String!, $input: ProjectUpdateInput!) {\n      projectUpdate(id: $id, input: $input) {\n        success\n        project {\n          id\n          name\n          slugId\n          url\n          status {\n            id\n            name\n          }\n        }\n      }\n    }\n  ": types.UpdateProjectDocument,
    "\n    mutation DeleteProject($id: String!) {\n      projectDelete(id: $id) {\n        success\n        entity {\n          id\n          name\n        }\n      }\n    }\n  ": types.DeleteProjectDocument,
    "\n    mutation UnarchiveProject($id: String!) {\n      projectUnarchive(id: $id) {\n        success\n        entity {\n          id\n          name\n          url\n        }\n      }\n    }\n  ": types.UnarchiveProjectDocument,
    "\n    mutation CreateMilestone($input: ProjectMilestoneCreateInput!) {\n      projectMilestoneCreate(input: $input) {\n        success\n        projectMilestone {\n          id\n          name\n          description\n          targetDate\n          status\n          progress\n          project {\n            id\n            name\n          }\n        }\n      }\n    }\n  ": types.CreateMilestoneDocument,
    "\n    query ListProjectMilestones($projectId: String!) {\n      project(id: $projectId) {\n        id\n        name\n        projectMilestones {\n          nodes {\n            id\n            name\n            description\n            targetDate\n            status\n            progress\n            sortOrder\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n  ": types.ListProjectMilestonesDocument,
    "\n    mutation UpdateMilestone($id: String!, $input: ProjectMilestoneUpdateInput!) {\n      projectMilestoneUpdate(id: $id, input: $input) {\n        success\n        projectMilestone {\n          id\n          name\n          description\n          targetDate\n          status\n        }\n      }\n    }\n  ": types.UpdateMilestoneDocument,
    "\n    mutation DeleteMilestone($id: String!) {\n      projectMilestoneDelete(id: $id) {\n        success\n      }\n    }\n  ": types.DeleteMilestoneDocument,
    "\n    mutation CreateProjectUpdate($input: ProjectUpdateCreateInput!) {\n      projectUpdateCreate(input: $input) {\n        success\n        projectUpdate {\n          id\n          body\n          health\n          createdAt\n          url\n          user {\n            id\n            name\n            displayName\n          }\n          project {\n            id\n            name\n          }\n        }\n      }\n    }\n  ": types.CreateProjectUpdateDocument,
    "\n    query ListProjectUpdates($projectId: String!, $first: Int) {\n      project(id: $projectId) {\n        id\n        name\n        projectUpdates(first: $first) {\n          nodes {\n            id\n            body\n            health\n            createdAt\n            updatedAt\n            url\n            user {\n              id\n              name\n              displayName\n            }\n          }\n        }\n      }\n    }\n  ": types.ListProjectUpdatesDocument,
    "\n    mutation CreateInitiative($input: InitiativeCreateInput!) {\n      initiativeCreate(input: $input) {\n        success\n        initiative {\n          id\n          name\n          slugId\n          url\n          status\n          owner {\n            id\n            name\n            displayName\n          }\n          targetDate\n        }\n      }\n    }\n  ": types.CreateInitiativeDocument,
    "\n    mutation UpdateInitiative($id: String!, $input: InitiativeUpdateInput!) {\n      initiativeUpdate(id: $id, input: $input) {\n        success\n        initiative {\n          id\n          name\n          slugId\n          url\n          status\n        }\n      }\n    }\n  ": types.UpdateInitiativeDocument,
    "\n    query ListInitiatives($filter: InitiativeFilter, $first: Int) {\n      initiatives(filter: $filter, first: $first) {\n        nodes {\n          id\n          name\n          slugId\n          url\n          description\n          status\n          owner {\n            id\n            name\n            displayName\n          }\n          targetDate\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  ": types.ListInitiativesDocument,
    "\n    query ViewInitiative($id: String!) {\n      initiative(id: $id) {\n        id\n        name\n        slugId\n        url\n        description\n        content\n        status\n        owner {\n          id\n          name\n          displayName\n        }\n        targetDate\n        createdAt\n        updatedAt\n        projects {\n          nodes {\n            id\n            name\n            slugId\n            status {\n              name\n              type\n            }\n            progress\n          }\n        }\n      }\n    }\n  ": types.ViewInitiativeDocument,
    "\n    mutation ArchiveInitiative($id: String!) {\n      initiativeArchive(id: $id) {\n        success\n      }\n    }\n  ": types.ArchiveInitiativeDocument,
    "\n    mutation UnarchiveInitiative($id: String!) {\n      initiativeUnarchive(id: $id) {\n        success\n        entity {\n          id\n          name\n          url\n        }\n      }\n    }\n  ": types.UnarchiveInitiativeDocument,
    "\n    mutation InitiativeAddProject($initiativeId: String!, $projectId: String!) {\n      initiativeToProjectCreate(\n        input: {\n          initiativeId: $initiativeId\n          projectId: $projectId\n        }\n      ) {\n        success\n        initiativeToProject {\n          id\n          initiative {\n            id\n            name\n            slugId\n          }\n        }\n      }\n    }\n  ": types.InitiativeAddProjectDocument,
    "\n    mutation InitiativeRemoveProject($id: String!) {\n      initiativeToProjectDelete(id: $id) {\n        success\n      }\n    }\n  ": types.InitiativeRemoveProjectDocument,
    "\n    mutation CreateInitiativeUpdate($input: InitiativeUpdateCreateInput!) {\n      initiativeUpdateCreate(input: $input) {\n        success\n        initiativeUpdate {\n          id\n          health\n          body\n          url\n          createdAt\n          user {\n            id\n            displayName\n          }\n        }\n      }\n    }\n  ": types.CreateInitiativeUpdateDocument,
    "\n    query ListInitiativeUpdates($filter: InitiativeUpdateFilter, $first: Int) {\n      initiativeUpdates(filter: $filter, first: $first) {\n        nodes {\n          id\n          health\n          body\n          url\n          createdAt\n          user {\n            id\n            displayName\n          }\n        }\n      }\n    }\n  ": types.ListInitiativeUpdatesDocument,
    "\n    mutation CreateLabel($input: IssueLabelCreateInput!) {\n      issueLabelCreate(input: $input) {\n        success\n        issueLabel {\n          id\n          name\n          description\n          color\n          team { id key name }\n        }\n      }\n    }\n  ": types.CreateLabelDocument,
    "\n    mutation UpdateLabel($id: String!, $input: IssueLabelUpdateInput!) {\n      issueLabelUpdate(id: $id, input: $input) {\n        success\n        issueLabel {\n          id\n          name\n          description\n          color\n          team { id key name }\n        }\n      }\n    }\n  ": types.UpdateLabelDocument,
    "\n    query ListLabels($teamId: ID, $first: Int) {\n      issueLabels(\n        filter: { team: { id: { eq: $teamId } } }\n        first: $first\n      ) {\n        nodes {\n          id\n          name\n          description\n          color\n          team { id key name }\n        }\n      }\n    }\n  ": types.ListLabelsDocument,
    "\n    mutation DeleteLabel($id: String!) {\n      issueLabelDelete(id: $id) {\n        success\n      }\n    }\n  ": types.DeleteLabelDocument,
    "\n    query GetIssueProject($issueId: String!) {\n      issue(id: $issueId) {\n        id\n        project {\n          id\n          name\n        }\n      }\n    }\n  ": types.GetIssueProjectDocument,
    "\n    query GetProjectStatuses {\n      projectStatuses {\n        nodes {\n          id\n          name\n          type\n          position\n          color\n          description\n        }\n      }\n    }\n  ": types.GetProjectStatusesDocument,
    "\n    query SearchIssues($term: String!, $teamId: String, $first: Int) {\n      searchIssues(term: $term, teamId: $teamId, first: $first) {\n        nodes {\n          id\n          identifier\n          title\n        }\n      }\n    }\n  ": types.SearchIssuesDocument,
    "\n    query SearchProjects($term: String!, $teamId: String, $first: Int) {\n      searchProjects(term: $term, teamId: $teamId, first: $first) {\n        nodes {\n          id\n          name\n        }\n      }\n    }\n  ": types.SearchProjectsDocument,
    "\n    query SearchDocuments($term: String!, $teamId: String, $first: Int) {\n      searchDocuments(term: $term, teamId: $teamId, first: $first) {\n        nodes {\n          id\n          title\n        }\n      }\n    }\n  ": types.SearchDocumentsDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query Config {\n    viewer {\n      organization {\n        urlKey\n      }\n    }\n    teams {\n      nodes {\n        id\n        key\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query Config {\n    viewer {\n      organization {\n        urlKey\n      }\n    }\n    teams {\n      nodes {\n        id\n        key\n        name\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      query GetUserSettings {\n        userSettings {\n          autoAssignToSelf\n        }\n      }\n    "): (typeof documents)["\n      query GetUserSettings {\n        userSettings {\n          autoAssignToSelf\n        }\n      }\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n            mutation CreateIssue($input: IssueCreateInput!) {\n              issueCreate(input: $input) {\n                success\n                issue { id, identifier, url, team { key } }\n              }\n            }\n          "): (typeof documents)["\n            mutation CreateIssue($input: IssueCreateInput!) {\n              issueCreate(input: $input) {\n                success\n                issue { id, identifier, url, team { key } }\n              }\n            }\n          "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n          mutation CreateIssue($input: IssueCreateInput!) {\n            issueCreate(input: $input) {\n              success\n              issue { id, identifier, url, team { key } }\n            }\n          }\n        "): (typeof documents)["\n          mutation CreateIssue($input: IssueCreateInput!) {\n            issueCreate(input: $input) {\n              success\n              issue { id, identifier, url, team { key } }\n            }\n          }\n        "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      query GetIssueDeleteDetails($id: String!) {\n        issue(id: $id) { title, identifier }\n      }\n    "): (typeof documents)["\n      query GetIssueDeleteDetails($id: String!) {\n        issue(id: $id) { title, identifier }\n      }\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      mutation DeleteIssue($id: String!) {\n        issueDelete(id: $id) {\n          success\n          entity {\n            identifier\n            title\n          }\n        }\n      }\n    "): (typeof documents)["\n      mutation DeleteIssue($id: String!) {\n        issueDelete(id: $id) {\n          success\n          entity {\n            identifier\n            title\n          }\n        }\n      }\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n          mutation UpdateIssue($id: String!, $input: IssueUpdateInput!) {\n            issueUpdate(id: $id, input: $input) {\n              success\n              issue { id, identifier, url, title }\n            }\n          }\n        "): (typeof documents)["\n          mutation UpdateIssue($id: String!, $input: IssueUpdateInput!) {\n            issueUpdate(id: $id, input: $input) {\n              success\n              issue { id, identifier, url, title }\n            }\n          }\n        "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetProjects($filter: ProjectFilter) {\n    projects(filter: $filter) {\n      nodes {\n        id\n        name\n        description\n        slugId\n        icon\n        color\n        status {\n          id\n          name\n          color\n          type\n        }\n        lead {\n          name\n          displayName\n          initials\n        }\n        priority\n        health\n        startDate\n        targetDate\n        startedAt\n        completedAt\n        canceledAt\n        createdAt\n        updatedAt\n        url\n        teams {\n          nodes {\n            key\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetProjects($filter: ProjectFilter) {\n    projects(filter: $filter) {\n      nodes {\n        id\n        name\n        description\n        slugId\n        icon\n        color\n        status {\n          id\n          name\n          color\n          type\n        }\n        lead {\n          name\n          displayName\n          initials\n        }\n        priority\n        health\n        startDate\n        targetDate\n        startedAt\n        completedAt\n        canceledAt\n        createdAt\n        updatedAt\n        url\n        teams {\n          nodes {\n            key\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n          query GetViewer {\n            viewer {\n              organization {\n                urlKey\n              }\n            }\n          }\n        "): (typeof documents)["\n          query GetViewer {\n            viewer {\n              organization {\n                urlKey\n              }\n            }\n          }\n        "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetProjectDetails($id: String!) {\n    project(id: $id) {\n      id\n      name\n      description\n      slugId\n      icon\n      color\n      status {\n        id\n        name\n        color\n      }\n      creator {\n        name\n        displayName\n      }\n      lead {\n        name\n        displayName\n      }\n      priority\n      health\n      startDate\n      targetDate\n      startedAt\n      completedAt\n      canceledAt\n      updatedAt\n      createdAt\n      url\n      teams {\n        nodes {\n          id\n          key\n          name\n        }\n      }\n      issues {\n        nodes {\n          id\n          identifier\n          title\n          state {\n            name\n            type\n          }\n        }\n      }\n      lastUpdate {\n        id\n        body\n        health\n        createdAt\n        user {\n          name\n          displayName\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetProjectDetails($id: String!) {\n    project(id: $id) {\n      id\n      name\n      description\n      slugId\n      icon\n      color\n      status {\n        id\n        name\n        color\n      }\n      creator {\n        name\n        displayName\n      }\n      lead {\n        name\n        displayName\n      }\n      priority\n      health\n      startDate\n      targetDate\n      startedAt\n      completedAt\n      canceledAt\n      updatedAt\n      createdAt\n      url\n      teams {\n        nodes {\n          id\n          key\n          name\n        }\n      }\n      issues {\n        nodes {\n          id\n          identifier\n          title\n          state {\n            name\n            type\n          }\n        }\n      }\n      lastUpdate {\n        id\n        body\n        health\n        createdAt\n        user {\n          name\n          displayName\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n            mutation CreateTeam($input: TeamCreateInput!) {\n              teamCreate(input: $input) {\n                success\n                team { id, name, key }\n              }\n            }\n          "): (typeof documents)["\n            mutation CreateTeam($input: TeamCreateInput!) {\n              teamCreate(input: $input) {\n                success\n                team { id, name, key }\n              }\n            }\n          "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n          mutation CreateTeam($input: TeamCreateInput!) {\n            teamCreate(input: $input) {\n              success\n              team { id, name, key }\n            }\n          }\n        "): (typeof documents)["\n          mutation CreateTeam($input: TeamCreateInput!) {\n            teamCreate(input: $input) {\n              success\n              team { id, name, key }\n            }\n          }\n        "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetTeams($filter: TeamFilter) {\n    teams(filter: $filter) {\n      nodes {\n        id\n        name\n        key\n        description\n        icon\n        color\n        cyclesEnabled\n        createdAt\n        updatedAt\n        archivedAt\n        organization {\n          id\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetTeams($filter: TeamFilter) {\n    teams(filter: $filter) {\n      nodes {\n        id\n        name\n        key\n        description\n        icon\n        color\n        cyclesEnabled\n        createdAt\n        updatedAt\n        archivedAt\n        organization {\n          id\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query GetIssueId($id: String!) {\n      issue(id: $id) {\n        id\n      }\n    }\n  "): (typeof documents)["\n    query GetIssueId($id: String!) {\n      issue(id: $id) {\n        id\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query GetWorkflowStates($teamKey: String!) {\n      team(id: $teamKey) {\n        states {\n          nodes {\n            id\n            name\n            type\n            position\n            color\n            description\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query GetWorkflowStates($teamKey: String!) {\n      team(id: $teamKey) {\n        states {\n          nodes {\n            id\n            name\n            type\n            position\n            color\n            description\n          }\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation UpdateIssueState($issueId: String!, $stateId: String!) {\n      issueUpdate(id: $issueId, input: { stateId: $stateId }) {\n        success\n      }\n    }\n  "): (typeof documents)["\n    mutation UpdateIssueState($issueId: String!, $stateId: String!) {\n      issueUpdate(id: $issueId, input: { stateId: $stateId }) {\n        success\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      query GetIssueDetailsWithComments($id: String!) {\n        issue(id: $id) {\n          title\n          description\n          url\n          branchName\n          comments(first: 50, orderBy: createdAt) {\n            nodes {\n              id\n              body\n              createdAt\n              user {\n                name\n                displayName\n              }\n              externalUser {\n                name\n                displayName\n              }\n              parent {\n                id\n              }\n            }\n          }\n        }\n      }\n    "): (typeof documents)["\n      query GetIssueDetailsWithComments($id: String!) {\n        issue(id: $id) {\n          title\n          description\n          url\n          branchName\n          comments(first: 50, orderBy: createdAt) {\n            nodes {\n              id\n              body\n              createdAt\n              user {\n                name\n                displayName\n              }\n              externalUser {\n                name\n                displayName\n              }\n              parent {\n                id\n              }\n            }\n          }\n        }\n      }\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      query GetIssueDetails($id: String!) {\n        issue(id: $id) {\n          title\n          description\n          url\n          branchName\n        }\n      }\n    "): (typeof documents)["\n      query GetIssueDetails($id: String!) {\n        issue(id: $id) {\n          title\n          description\n          url\n          branchName\n        }\n      }\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      query GetParentIssueTitle($id: String!) {\n        issue(id: $id) {\n          title\n          identifier\n        }\n      }\n    "): (typeof documents)["\n      query GetParentIssueTitle($id: String!) {\n        issue(id: $id) {\n          title\n          identifier\n        }\n      }\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      query GetParentIssueData($id: String!) {\n        issue(id: $id) {\n          title\n          identifier\n          project {\n            id\n          }\n        }\n      }\n    "): (typeof documents)["\n      query GetParentIssueData($id: String!) {\n        issue(id: $id) {\n          title\n          identifier\n          project {\n            id\n          }\n        }\n      }\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query GetIssuesForState($sort: [IssueSortInput!], $filter: IssueFilter!) {\n      issues(filter: $filter, sort: $sort) {\n        nodes {\n          id\n          identifier\n          title\n          priority\n          estimate\n          assignee {\n            initials\n          }\n          state {\n            id\n            name\n            color\n          }\n          labels {\n            nodes {\n              id\n              name\n              color\n            }\n          }\n          updatedAt\n        }\n      }\n    }\n  "): (typeof documents)["\n    query GetIssuesForState($sort: [IssueSortInput!], $filter: IssueFilter!) {\n      issues(filter: $filter, sort: $sort) {\n        nodes {\n          id\n          identifier\n          title\n          priority\n          estimate\n          assignee {\n            initials\n          }\n          state {\n            id\n            name\n            color\n          }\n          labels {\n            nodes {\n              id\n              name\n              color\n            }\n          }\n          updatedAt\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query GetProjectIdByName($name: String!) {\n      projects(filter: { name: { eq: $name } }) {\n        nodes {\n          id\n        }\n      }\n    }\n  "): (typeof documents)["\n    query GetProjectIdByName($name: String!) {\n      projects(filter: { name: { eq: $name } }) {\n        nodes {\n          id\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query GetProjectIdOptionsByName($name: String!) {\n      projects(filter: { name: { containsIgnoreCase: $name } }) {\n        nodes {\n          id\n          name\n        }\n      }\n    }\n  "): (typeof documents)["\n    query GetProjectIdOptionsByName($name: String!) {\n      projects(filter: { name: { containsIgnoreCase: $name } }) {\n        nodes {\n          id\n          name\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query GetTeamIdByKey($team: String!) {\n      teams(filter: { key: { eq: $team } }) {\n        nodes {\n          id\n        }\n      }\n    }\n  "): (typeof documents)["\n    query GetTeamIdByKey($team: String!) {\n      teams(filter: { key: { eq: $team } }) {\n        nodes {\n          id\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query GetTeamIdOptionsByKey($team: String!) {\n      teams(filter: { key: { containsIgnoreCase: $team } }) {\n        nodes {\n          id\n          key\n          name\n        }\n      }\n    }\n  "): (typeof documents)["\n    query GetTeamIdOptionsByKey($team: String!) {\n      teams(filter: { key: { containsIgnoreCase: $team } }) {\n        nodes {\n          id\n          key\n          name\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query ListUsers {\n      users {\n        nodes {\n          id\n          displayName\n          email\n        }\n      }\n    }\n  "): (typeof documents)["\n    query ListUsers {\n      users {\n        nodes {\n          id\n          displayName\n          email\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      query GetViewerId {\n        viewer {\n          id\n        }\n      }\n    "): (typeof documents)["\n      query GetViewerId {\n        viewer {\n          id\n        }\n      }\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      query LookupUser($input: String!) {\n        users(\n          filter: {\n            or: [\n              { email: { eqIgnoreCase: $input } }\n              { displayName: { eqIgnoreCase: $input } }\n              { name: { containsIgnoreCaseAndAccent: $input } }\n            ]\n          }\n        ) {\n          nodes {\n            id\n            email\n            displayName\n            name\n          }\n        }\n      }\n    "): (typeof documents)["\n      query LookupUser($input: String!) {\n        users(\n          filter: {\n            or: [\n              { email: { eqIgnoreCase: $input } }\n              { displayName: { eqIgnoreCase: $input } }\n              { name: { containsIgnoreCaseAndAccent: $input } }\n            ]\n          }\n        ) {\n          nodes {\n            id\n            email\n            displayName\n            name\n          }\n        }\n      }\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query GetIssueLabelIdByNameForTeam($name: String!, $teamKey: String!) {\n      issueLabels(\n        filter: {\n          name: { eqIgnoreCase: $name }\n          or: [{ team: { key: { eq: $teamKey } } }, { team: { null: true } }]\n        }\n      ) {\n        nodes {\n          id\n          name\n        }\n      }\n    }\n  "): (typeof documents)["\n    query GetIssueLabelIdByNameForTeam($name: String!, $teamKey: String!) {\n      issueLabels(\n        filter: {\n          name: { eqIgnoreCase: $name }\n          or: [{ team: { key: { eq: $teamKey } } }, { team: { null: true } }]\n        }\n      ) {\n        nodes {\n          id\n          name\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query GetIssueLabelIdOptionsByNameForTeam(\n      $name: String!\n      $teamKey: String!\n    ) {\n      issueLabels(\n        filter: {\n          name: { containsIgnoreCase: $name }\n          or: [{ team: { key: { eq: $teamKey } } }, { team: { null: true } }]\n        }\n      ) {\n        nodes {\n          id\n          name\n        }\n      }\n    }\n  "): (typeof documents)["\n    query GetIssueLabelIdOptionsByNameForTeam(\n      $name: String!\n      $teamKey: String!\n    ) {\n      issueLabels(\n        filter: {\n          name: { containsIgnoreCase: $name }\n          or: [{ team: { key: { eq: $teamKey } } }, { team: { null: true } }]\n        }\n      ) {\n        nodes {\n          id\n          name\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query GetAllTeams($first: Int, $after: String) {\n      teams(first: $first, after: $after) {\n        nodes {\n          id\n          key\n          name\n        }\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n      }\n    }\n  "): (typeof documents)["\n    query GetAllTeams($first: Int, $after: String) {\n      teams(first: $first, after: $after) {\n        nodes {\n          id\n          key\n          name\n        }\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query GetLabelsForTeam($teamKey: String!) {\n      team(id: $teamKey) {\n        labels {\n          nodes {\n            id\n            name\n            color\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query GetLabelsForTeam($teamKey: String!) {\n      team(id: $teamKey) {\n        labels {\n          nodes {\n            id\n            name\n            color\n          }\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query GetTeamMembers($teamKey: String!, $first: Int, $after: String) {\n      team(id: $teamKey) {\n        members(first: $first, after: $after) {\n          nodes {\n            id\n            name\n            displayName\n            email\n            active\n            initials\n            description\n            timezone\n            lastSeen\n            statusEmoji\n            statusLabel\n            guest\n            isAssignable\n          }\n          pageInfo {\n            hasNextPage\n            endCursor\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query GetTeamMembers($teamKey: String!, $first: Int, $after: String) {\n      team(id: $teamKey) {\n        members(first: $first, after: $after) {\n          nodes {\n            id\n            name\n            displayName\n            email\n            active\n            initials\n            description\n            timezone\n            lastSeen\n            statusEmoji\n            statusLabel\n            guest\n            isAssignable\n          }\n          pageInfo {\n            hasNextPage\n            endCursor\n          }\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation CreateDocument($input: DocumentCreateInput!) {\n      documentCreate(input: $input) {\n        success\n        document {\n          id\n          title\n          slugId\n          url\n          project {\n            id\n            name\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    mutation CreateDocument($input: DocumentCreateInput!) {\n      documentCreate(input: $input) {\n        success\n        document {\n          id\n          title\n          slugId\n          url\n          project {\n            id\n            name\n          }\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation UpdateDocument($id: String!, $input: DocumentUpdateInput!) {\n      documentUpdate(id: $id, input: $input) {\n        success\n        document {\n          id\n          title\n          slugId\n          url\n        }\n      }\n    }\n  "): (typeof documents)["\n    mutation UpdateDocument($id: String!, $input: DocumentUpdateInput!) {\n      documentUpdate(id: $id, input: $input) {\n        success\n        document {\n          id\n          title\n          slugId\n          url\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation DeleteDocument($id: String!) {\n      documentDelete(id: $id) {\n        success\n        entity {\n          id\n          title\n        }\n      }\n    }\n  "): (typeof documents)["\n    mutation DeleteDocument($id: String!) {\n      documentDelete(id: $id) {\n        success\n        entity {\n          id\n          title\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation UnarchiveDocument($id: String!) {\n      documentUnarchive(id: $id) {\n        success\n        entity {\n          id\n          title\n          url\n        }\n      }\n    }\n  "): (typeof documents)["\n    mutation UnarchiveDocument($id: String!) {\n      documentUnarchive(id: $id) {\n        success\n        entity {\n          id\n          title\n          url\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query ListDocuments(\n      $filter: DocumentFilter\n      $first: Int\n      $orderBy: PaginationOrderBy\n      $includeArchived: Boolean\n    ) {\n      documents(\n        filter: $filter\n        first: $first\n        orderBy: $orderBy\n        includeArchived: $includeArchived\n      ) {\n        nodes {\n          id\n          title\n          slugId\n          icon\n          color\n          createdAt\n          updatedAt\n          url\n          creator {\n            id\n            name\n            displayName\n          }\n          project {\n            id\n            name\n          }\n          initiative {\n            id\n            name\n          }\n        }\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n      }\n    }\n  "): (typeof documents)["\n    query ListDocuments(\n      $filter: DocumentFilter\n      $first: Int\n      $orderBy: PaginationOrderBy\n      $includeArchived: Boolean\n    ) {\n      documents(\n        filter: $filter\n        first: $first\n        orderBy: $orderBy\n        includeArchived: $includeArchived\n      ) {\n        nodes {\n          id\n          title\n          slugId\n          icon\n          color\n          createdAt\n          updatedAt\n          url\n          creator {\n            id\n            name\n            displayName\n          }\n          project {\n            id\n            name\n          }\n          initiative {\n            id\n            name\n          }\n        }\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query ViewDocument($id: String!) {\n      document(id: $id) {\n        id\n        title\n        slugId\n        icon\n        color\n        url\n        createdAt\n        updatedAt\n        creator {\n          id\n          name\n          displayName\n        }\n        updatedBy {\n          id\n          name\n          displayName\n        }\n        project {\n          id\n          name\n          url\n        }\n        initiative {\n          id\n          name\n          url\n        }\n        content\n        comments {\n          nodes {\n            id\n            body\n            createdAt\n            user {\n              id\n              name\n              displayName\n            }\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query ViewDocument($id: String!) {\n      document(id: $id) {\n        id\n        title\n        slugId\n        icon\n        color\n        url\n        createdAt\n        updatedAt\n        creator {\n          id\n          name\n          displayName\n        }\n        updatedBy {\n          id\n          name\n          displayName\n        }\n        project {\n          id\n          name\n          url\n        }\n        initiative {\n          id\n          name\n          url\n        }\n        content\n        comments {\n          nodes {\n            id\n            body\n            createdAt\n            user {\n              id\n              name\n              displayName\n            }\n          }\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query ListProjectStatuses {\n      projectStatuses {\n        nodes {\n          id\n          name\n          type\n          color\n          description\n          position\n        }\n      }\n    }\n  "): (typeof documents)["\n    query ListProjectStatuses {\n      projectStatuses {\n        nodes {\n          id\n          name\n          type\n          color\n          description\n          position\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation CreateProject($input: ProjectCreateInput!) {\n      projectCreate(input: $input) {\n        success\n        project {\n          id\n          name\n          slugId\n          url\n          status {\n            id\n            name\n            type\n          }\n          lead {\n            id\n            name\n            displayName\n          }\n          teams {\n            nodes {\n              id\n              key\n              name\n            }\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    mutation CreateProject($input: ProjectCreateInput!) {\n      projectCreate(input: $input) {\n        success\n        project {\n          id\n          name\n          slugId\n          url\n          status {\n            id\n            name\n            type\n          }\n          lead {\n            id\n            name\n            displayName\n          }\n          teams {\n            nodes {\n              id\n              key\n              name\n            }\n          }\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation UpdateProject($id: String!, $input: ProjectUpdateInput!) {\n      projectUpdate(id: $id, input: $input) {\n        success\n        project {\n          id\n          name\n          slugId\n          url\n          status {\n            id\n            name\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    mutation UpdateProject($id: String!, $input: ProjectUpdateInput!) {\n      projectUpdate(id: $id, input: $input) {\n        success\n        project {\n          id\n          name\n          slugId\n          url\n          status {\n            id\n            name\n          }\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation DeleteProject($id: String!) {\n      projectDelete(id: $id) {\n        success\n        entity {\n          id\n          name\n        }\n      }\n    }\n  "): (typeof documents)["\n    mutation DeleteProject($id: String!) {\n      projectDelete(id: $id) {\n        success\n        entity {\n          id\n          name\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation UnarchiveProject($id: String!) {\n      projectUnarchive(id: $id) {\n        success\n        entity {\n          id\n          name\n          url\n        }\n      }\n    }\n  "): (typeof documents)["\n    mutation UnarchiveProject($id: String!) {\n      projectUnarchive(id: $id) {\n        success\n        entity {\n          id\n          name\n          url\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation CreateMilestone($input: ProjectMilestoneCreateInput!) {\n      projectMilestoneCreate(input: $input) {\n        success\n        projectMilestone {\n          id\n          name\n          description\n          targetDate\n          status\n          progress\n          project {\n            id\n            name\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    mutation CreateMilestone($input: ProjectMilestoneCreateInput!) {\n      projectMilestoneCreate(input: $input) {\n        success\n        projectMilestone {\n          id\n          name\n          description\n          targetDate\n          status\n          progress\n          project {\n            id\n            name\n          }\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query ListProjectMilestones($projectId: String!) {\n      project(id: $projectId) {\n        id\n        name\n        projectMilestones {\n          nodes {\n            id\n            name\n            description\n            targetDate\n            status\n            progress\n            sortOrder\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query ListProjectMilestones($projectId: String!) {\n      project(id: $projectId) {\n        id\n        name\n        projectMilestones {\n          nodes {\n            id\n            name\n            description\n            targetDate\n            status\n            progress\n            sortOrder\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation UpdateMilestone($id: String!, $input: ProjectMilestoneUpdateInput!) {\n      projectMilestoneUpdate(id: $id, input: $input) {\n        success\n        projectMilestone {\n          id\n          name\n          description\n          targetDate\n          status\n        }\n      }\n    }\n  "): (typeof documents)["\n    mutation UpdateMilestone($id: String!, $input: ProjectMilestoneUpdateInput!) {\n      projectMilestoneUpdate(id: $id, input: $input) {\n        success\n        projectMilestone {\n          id\n          name\n          description\n          targetDate\n          status\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation DeleteMilestone($id: String!) {\n      projectMilestoneDelete(id: $id) {\n        success\n      }\n    }\n  "): (typeof documents)["\n    mutation DeleteMilestone($id: String!) {\n      projectMilestoneDelete(id: $id) {\n        success\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation CreateProjectUpdate($input: ProjectUpdateCreateInput!) {\n      projectUpdateCreate(input: $input) {\n        success\n        projectUpdate {\n          id\n          body\n          health\n          createdAt\n          url\n          user {\n            id\n            name\n            displayName\n          }\n          project {\n            id\n            name\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    mutation CreateProjectUpdate($input: ProjectUpdateCreateInput!) {\n      projectUpdateCreate(input: $input) {\n        success\n        projectUpdate {\n          id\n          body\n          health\n          createdAt\n          url\n          user {\n            id\n            name\n            displayName\n          }\n          project {\n            id\n            name\n          }\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query ListProjectUpdates($projectId: String!, $first: Int) {\n      project(id: $projectId) {\n        id\n        name\n        projectUpdates(first: $first) {\n          nodes {\n            id\n            body\n            health\n            createdAt\n            updatedAt\n            url\n            user {\n              id\n              name\n              displayName\n            }\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query ListProjectUpdates($projectId: String!, $first: Int) {\n      project(id: $projectId) {\n        id\n        name\n        projectUpdates(first: $first) {\n          nodes {\n            id\n            body\n            health\n            createdAt\n            updatedAt\n            url\n            user {\n              id\n              name\n              displayName\n            }\n          }\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation CreateInitiative($input: InitiativeCreateInput!) {\n      initiativeCreate(input: $input) {\n        success\n        initiative {\n          id\n          name\n          slugId\n          url\n          status\n          owner {\n            id\n            name\n            displayName\n          }\n          targetDate\n        }\n      }\n    }\n  "): (typeof documents)["\n    mutation CreateInitiative($input: InitiativeCreateInput!) {\n      initiativeCreate(input: $input) {\n        success\n        initiative {\n          id\n          name\n          slugId\n          url\n          status\n          owner {\n            id\n            name\n            displayName\n          }\n          targetDate\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation UpdateInitiative($id: String!, $input: InitiativeUpdateInput!) {\n      initiativeUpdate(id: $id, input: $input) {\n        success\n        initiative {\n          id\n          name\n          slugId\n          url\n          status\n        }\n      }\n    }\n  "): (typeof documents)["\n    mutation UpdateInitiative($id: String!, $input: InitiativeUpdateInput!) {\n      initiativeUpdate(id: $id, input: $input) {\n        success\n        initiative {\n          id\n          name\n          slugId\n          url\n          status\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query ListInitiatives($filter: InitiativeFilter, $first: Int) {\n      initiatives(filter: $filter, first: $first) {\n        nodes {\n          id\n          name\n          slugId\n          url\n          description\n          status\n          owner {\n            id\n            name\n            displayName\n          }\n          targetDate\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  "): (typeof documents)["\n    query ListInitiatives($filter: InitiativeFilter, $first: Int) {\n      initiatives(filter: $filter, first: $first) {\n        nodes {\n          id\n          name\n          slugId\n          url\n          description\n          status\n          owner {\n            id\n            name\n            displayName\n          }\n          targetDate\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query ViewInitiative($id: String!) {\n      initiative(id: $id) {\n        id\n        name\n        slugId\n        url\n        description\n        content\n        status\n        owner {\n          id\n          name\n          displayName\n        }\n        targetDate\n        createdAt\n        updatedAt\n        projects {\n          nodes {\n            id\n            name\n            slugId\n            status {\n              name\n              type\n            }\n            progress\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query ViewInitiative($id: String!) {\n      initiative(id: $id) {\n        id\n        name\n        slugId\n        url\n        description\n        content\n        status\n        owner {\n          id\n          name\n          displayName\n        }\n        targetDate\n        createdAt\n        updatedAt\n        projects {\n          nodes {\n            id\n            name\n            slugId\n            status {\n              name\n              type\n            }\n            progress\n          }\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation ArchiveInitiative($id: String!) {\n      initiativeArchive(id: $id) {\n        success\n      }\n    }\n  "): (typeof documents)["\n    mutation ArchiveInitiative($id: String!) {\n      initiativeArchive(id: $id) {\n        success\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation UnarchiveInitiative($id: String!) {\n      initiativeUnarchive(id: $id) {\n        success\n        entity {\n          id\n          name\n          url\n        }\n      }\n    }\n  "): (typeof documents)["\n    mutation UnarchiveInitiative($id: String!) {\n      initiativeUnarchive(id: $id) {\n        success\n        entity {\n          id\n          name\n          url\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation InitiativeAddProject($initiativeId: String!, $projectId: String!) {\n      initiativeToProjectCreate(\n        input: {\n          initiativeId: $initiativeId\n          projectId: $projectId\n        }\n      ) {\n        success\n        initiativeToProject {\n          id\n          initiative {\n            id\n            name\n            slugId\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    mutation InitiativeAddProject($initiativeId: String!, $projectId: String!) {\n      initiativeToProjectCreate(\n        input: {\n          initiativeId: $initiativeId\n          projectId: $projectId\n        }\n      ) {\n        success\n        initiativeToProject {\n          id\n          initiative {\n            id\n            name\n            slugId\n          }\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation InitiativeRemoveProject($id: String!) {\n      initiativeToProjectDelete(id: $id) {\n        success\n      }\n    }\n  "): (typeof documents)["\n    mutation InitiativeRemoveProject($id: String!) {\n      initiativeToProjectDelete(id: $id) {\n        success\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation CreateInitiativeUpdate($input: InitiativeUpdateCreateInput!) {\n      initiativeUpdateCreate(input: $input) {\n        success\n        initiativeUpdate {\n          id\n          health\n          body\n          url\n          createdAt\n          user {\n            id\n            displayName\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    mutation CreateInitiativeUpdate($input: InitiativeUpdateCreateInput!) {\n      initiativeUpdateCreate(input: $input) {\n        success\n        initiativeUpdate {\n          id\n          health\n          body\n          url\n          createdAt\n          user {\n            id\n            displayName\n          }\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query ListInitiativeUpdates($filter: InitiativeUpdateFilter, $first: Int) {\n      initiativeUpdates(filter: $filter, first: $first) {\n        nodes {\n          id\n          health\n          body\n          url\n          createdAt\n          user {\n            id\n            displayName\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query ListInitiativeUpdates($filter: InitiativeUpdateFilter, $first: Int) {\n      initiativeUpdates(filter: $filter, first: $first) {\n        nodes {\n          id\n          health\n          body\n          url\n          createdAt\n          user {\n            id\n            displayName\n          }\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation CreateLabel($input: IssueLabelCreateInput!) {\n      issueLabelCreate(input: $input) {\n        success\n        issueLabel {\n          id\n          name\n          description\n          color\n          team { id key name }\n        }\n      }\n    }\n  "): (typeof documents)["\n    mutation CreateLabel($input: IssueLabelCreateInput!) {\n      issueLabelCreate(input: $input) {\n        success\n        issueLabel {\n          id\n          name\n          description\n          color\n          team { id key name }\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation UpdateLabel($id: String!, $input: IssueLabelUpdateInput!) {\n      issueLabelUpdate(id: $id, input: $input) {\n        success\n        issueLabel {\n          id\n          name\n          description\n          color\n          team { id key name }\n        }\n      }\n    }\n  "): (typeof documents)["\n    mutation UpdateLabel($id: String!, $input: IssueLabelUpdateInput!) {\n      issueLabelUpdate(id: $id, input: $input) {\n        success\n        issueLabel {\n          id\n          name\n          description\n          color\n          team { id key name }\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query ListLabels($teamId: ID, $first: Int) {\n      issueLabels(\n        filter: { team: { id: { eq: $teamId } } }\n        first: $first\n      ) {\n        nodes {\n          id\n          name\n          description\n          color\n          team { id key name }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query ListLabels($teamId: ID, $first: Int) {\n      issueLabels(\n        filter: { team: { id: { eq: $teamId } } }\n        first: $first\n      ) {\n        nodes {\n          id\n          name\n          description\n          color\n          team { id key name }\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation DeleteLabel($id: String!) {\n      issueLabelDelete(id: $id) {\n        success\n      }\n    }\n  "): (typeof documents)["\n    mutation DeleteLabel($id: String!) {\n      issueLabelDelete(id: $id) {\n        success\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query GetIssueProject($issueId: String!) {\n      issue(id: $issueId) {\n        id\n        project {\n          id\n          name\n        }\n      }\n    }\n  "): (typeof documents)["\n    query GetIssueProject($issueId: String!) {\n      issue(id: $issueId) {\n        id\n        project {\n          id\n          name\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query GetProjectStatuses {\n      projectStatuses {\n        nodes {\n          id\n          name\n          type\n          position\n          color\n          description\n        }\n      }\n    }\n  "): (typeof documents)["\n    query GetProjectStatuses {\n      projectStatuses {\n        nodes {\n          id\n          name\n          type\n          position\n          color\n          description\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query SearchIssues($term: String!, $teamId: String, $first: Int) {\n      searchIssues(term: $term, teamId: $teamId, first: $first) {\n        nodes {\n          id\n          identifier\n          title\n        }\n      }\n    }\n  "): (typeof documents)["\n    query SearchIssues($term: String!, $teamId: String, $first: Int) {\n      searchIssues(term: $term, teamId: $teamId, first: $first) {\n        nodes {\n          id\n          identifier\n          title\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query SearchProjects($term: String!, $teamId: String, $first: Int) {\n      searchProjects(term: $term, teamId: $teamId, first: $first) {\n        nodes {\n          id\n          name\n        }\n      }\n    }\n  "): (typeof documents)["\n    query SearchProjects($term: String!, $teamId: String, $first: Int) {\n      searchProjects(term: $term, teamId: $teamId, first: $first) {\n        nodes {\n          id\n          name\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query SearchDocuments($term: String!, $teamId: String, $first: Int) {\n      searchDocuments(term: $term, teamId: $teamId, first: $first) {\n        nodes {\n          id\n          title\n        }\n      }\n    }\n  "): (typeof documents)["\n    query SearchDocuments($term: String!, $teamId: String, $first: Int) {\n      searchDocuments(term: $term, teamId: $teamId, first: $first) {\n        nodes {\n          id\n          title\n        }\n      }\n    }\n  "];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;